{@ocaml[
# List.map (fun x -> x * x) [(1 + 9); 2; 3];;
- : int list = [100; 4; 9]
]}

{@ocaml[List.map (fun x -> x * x) [1; 2; 3]]}


{@ocaml[
let my_list = [1; 2; 3] in
let the_list = 0 :: my_list in
List.map (fun x -> x * x) the_list;;
   let another_phrase = "foo";;
let the = "the" in
let last = "last" in
let phrase = "phrase" in
print_endline (String.concat " " [the; last; phrase])
]}

With the optional header:

{@ocaml[
# List.map (fun x -> x * x) [(1 + 9); 2; 3];;
- : int list = [100; 4; 9]
# List.map (fun x -> x * x) [1; 2; 3];;
- : int list = [1; 4; 9]
]}

A shell block:

{@sh set-FOO=Hello,set-BAR=Bash[
$ echo $FOO $BAR
Hello Bash
]}

A block that doesn't run:

{@text[
# 1
= 2 ?
]}

Test the environment - in a new environment, previously declared values
shouldn't be bound.

{@ocaml env=e1[
# my_list;;
Line 1, characters 1-8:
Error: Unbound value my_list
]}

{@ocaml[
# #directory "/Users/jonathanludlam/devel/mdx/_opam/lib/mdx/mime_printer";;
# Mime_printer.push "text/odoc" "Hello, world";;
Line 1, characters 1-18:
Error: Unbound module Mime_printer
]}

